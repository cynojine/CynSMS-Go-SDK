/*
 * cynsmsapi_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

package apiclient_pkg


import(
	"github.com/apimatic/unirest-go"
	"cynsmsapi_lib/apihelper_pkg"
	"cynsmsapi_lib/configuration_pkg"
)

/*
 * Input structure for the method GetBALANCECHECK
 */
type GetBALANCECHECKInput struct {
    ApiKey          string          //Get your account balance
    Response        string          //Json Responce
}

/*
 * Client structure as interface implementation
 */
type APICLIENT_IMPL struct {
     config configuration_pkg.CONFIGURATION
}

/**
 * TODO: type endpoint description here
 * @param    string        apiKey      parameter: Required
 * @param    string        to          parameter: Required
 * @param    string        sms         parameter: Required
 * @param    string        from        parameter: Required
 * @return	Returns the string response from the API call
 */
func (me *APICLIENT_IMPL) CreateSendSMS (
            apiKey string,
            to string,
            sms string,
            from string) (string, error) {
    //the endpoint path uri
    _pathUrl := "/api?action=send-sms"

    //variable to hold errors
    var err error = nil
    //the base uri for api requests
    _queryBuilder := configuration_pkg.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + _pathUrl

    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{} {
        "api key" : apiKey,
        "to" : to,
        "sms" : sms,
        "from" : from,
    })
    if err != nil {
        //error in query param handling
        return "", err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }
    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, nil)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request,false);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }

    //returning the response
    return _response.Body, nil

}

/**
 * Checking SMS Balance
 * @param  GetBALANCECHECKInput     Structure with all inputs
 * @param    queryParameters    Additional optional query parameters are supported by this endpoint
 * @return	Returns the  response from the API call
 */
func (me *APICLIENT_IMPL) GetBALANCECHECK (input *GetBALANCECHECKInput, queryParameters map[string]interface{}) (error) {
    //the endpoint path uri
    _pathUrl := "/api?action=check-balance"

    //variable to hold errors
    var err error = nil
    //the base uri for api requests
    _queryBuilder := configuration_pkg.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + _pathUrl

    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{} {
        "api_key" : input.ApiKey,
        "response" : input.Response,
    })
    if err != nil {
        //error in query param handling
        return err
    }

    //append optional parameters to the query
    _queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, queryParameters)
    if err != nil {
        //error in optional query params handling
        return err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return err
    }
    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request,false);
    if err != nil {
        //error in API invocation
        return err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return err
    }

    //returning the response
    return nil

}

